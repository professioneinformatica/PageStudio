@using PageStudio.Core.Models
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Document Properties</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    @if (Document != null)
                    {
                        <div class="mb-3">
                            <label for="documentId" class="form-label">Document ID</label>
                            <input type="text" class="form-control" id="documentId" value="@Document.Id" readonly>
                            <div class="form-text">This field is read-only.</div>
                        </div>

                        <div class="mb-3">
                            <label for="documentName" class="form-label">Document Name</label>
                            <input type="text" class="form-control" id="documentName" @bind="DocumentName">
                        </div>

                        <div class="mb-3">
                            <label for="documentDpi" class="form-label">DPI (Dots Per Inch)</label>
                            <input type="number" class="form-control" id="documentDpi" @bind="DocumentDpi" min="72" max="600">
                            <div class="form-text">Standard values: 72 (screen), 150 (draft print), 300 (high quality print), 600 (professional print)</div>
                        </div>

                        <div class="mb-3">
                            <label for="unitOfMeasure" class="form-label">Unit of Measure</label>
                            <select class="form-select" id="unitOfMeasure" @bind="DocumentUnitOfMeasure">
                                <option value="@UnitOfMeasure.Centimeters">Centimeters (cm)</option>
                                <option value="@UnitOfMeasure.Inches">Inches (in)</option>
                            </select>
                        </div>

                        <div class="alert alert-info">
                            <strong>Current Page Format:</strong> @Document.DefaultPageFormat.Name<br>
                            <strong>Dimensions:</strong> 
                            @Document.DefaultPageFormat.GetWidthInUnit(DocumentUnitOfMeasure, DocumentDpi).ToString("F2") × 
                            @Document.DefaultPageFormat.GetHeightInUnit(DocumentUnitOfMeasure, DocumentDpi).ToString("F2") 
                            @(DocumentUnitOfMeasure == UnitOfMeasure.Centimeters ? "cm" : "in")<br>
                            <strong>Pixel Size:</strong> 
                            @Document.DefaultPageFormat.GetPixelWidth(DocumentDpi).ToString("F0") × 
                            @Document.DefaultPageFormat.GetPixelHeight(DocumentDpi).ToString("F0") pixels
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Document? Document { get; set; }
    [Parameter] public EventCallback<Document> OnDocumentChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string DocumentName = string.Empty;
    private int DocumentDpi = 72;
    private UnitOfMeasure DocumentUnitOfMeasure = UnitOfMeasure.Centimeters;

    protected override void OnParametersSet()
    {
        if (Document != null)
        {
            DocumentName = Document.Name;
            DocumentDpi = Document.Dpi;
            DocumentUnitOfMeasure = Document.UnitOfMeasure;
        }
    }

    private async Task SaveChanges()
    {
        if (Document != null)
        {
            Document.Name = DocumentName;
            Document.Dpi = DocumentDpi;
            Document.UnitOfMeasure = DocumentUnitOfMeasure;
            Document.UpdateModifiedTime();

            // Update metadata
            Document.SetMetadata("DPI", DocumentDpi);
            Document.SetMetadata("UnitOfMeasure", DocumentUnitOfMeasure.ToString());

            await OnDocumentChanged.InvokeAsync(Document);
        }
        
        await Close();
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
}